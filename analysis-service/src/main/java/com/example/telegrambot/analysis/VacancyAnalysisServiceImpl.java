package com.example.telegrambot.analysis;

import com.example.client.UserDataClient;
import com.example.dto.AnalysisResultDto;
import com.example.dto.AnalysisTaskDto;
import com.example.dto.UserDto;
import com.example.telegrambot.infra.kafka.KafkaProducerService;
import feign.FeignException;
import java.time.Instant;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class VacancyAnalysisServiceImpl implements VacancyAnalysisService {
    private final ChatClient chatClient;
    private final UserDataClient userDataClient;
    private final KafkaProducerService kafkaProducerService;

    public VacancyAnalysisServiceImpl(ChatClient.Builder builder,
                                      UserDataClient userDataClient,
                                      KafkaProducerService kafkaProducerService) {
        this.chatClient = builder.build();
        this.userDataClient = userDataClient;
        this.kafkaProducerService = kafkaProducerService;
    }

    @Override
    public void analyze(AnalysisTaskDto task) {
        UserDto dto;
        try {
            dto = userDataClient.getUserByChatId(task.chatId());
        } catch (FeignException.NotFound e) {
            log.error("User not found for analysis task, chatId: {}", task.chatId());
            sendErrorResult(
                    task.chatId(),
                    "Sorry, your profile was not found. Please start over with /start.");
            return;
        } catch (Exception e) {
            log.error("Error fetching user {} via Feign client: {}",
                    task.chatId(),
                    e.getMessage());
            sendErrorResult(
                    task.chatId(),
                    "Sorry, a temporary service error occurred. Please try again later.");
            return;
        }

        String cvText = (dto.getCv() == null || dto.getCv().isBlank())
                ? "No CV provided by the user."
                : dto.getCv();

        String promptText = """
        **Role:** You are "Elena", a professional and empathetic career coach.
        **Task:** Based on the candidate's RESUME and the JOB VACANCY,
        create a complete "Application Pack".

        **Instructions:**
        Generate the output in two parts: a Cover Letter and Interview Tips.

        --- PART 1: COVER LETTER ---
        Write a polite, professional, and compelling cover letter.
        - Highlight 2-3 key skills from the RESUME that match the JOB VACANCY.
        - Keep the tone confident but humble.

        --- PART 2: INTERVIEW PREPARATION TIPS ---
        Based on the JOB VACANCY, generate potential interview questions.
        - Include 3-4 technical questions on the required technologies.
        - Include 1-2 behavioral questions (e.g., "Describe a time when you...").
        - Suggest 1-2 topics to research about the company.

        --- CANDIDATE'S RESUME ---
        %s

        --- JOB VACANCY ---
        %s
                """.formatted(cvText, task.vacancyText());

        log.info("Generating a full 'Application Pack' for user: {}", dto.getChatId());

        String applicationPack;

        try {
            applicationPack = chatClient
                    .prompt()
                    .user(promptText)
                    .call()
                    .content();

            if (applicationPack == null || applicationPack.isBlank()) {
                throw new IllegalStateException("AI returned null or empty content.");
            }
            log.info("Application Pack generated successfully.");
        } catch (Exception e) {
            log.error("AI analysis failed for user: {}", task.chatId(), e);
            sendErrorResult(
                    task.chatId(),
                    "Sorry, an error occurred while analyzing the vacancy. "
                            + "Please try again later.");
            return;
        }

        String disclaimer = """
        ---
        *Disclaimer: This content was generated by an AI.
        Please review, edit, and personalize it before use.*
                """;

        String finalResult = applicationPack + disclaimer;
        kafkaProducerService.sendAnalysisResult(
                new AnalysisResultDto(
                        task.taskId(),
                        task.chatId(),
                        Instant.now(),
                        finalResult
                )
        );
    }

    private void sendErrorResult(long chatId, String message) {
        kafkaProducerService.sendAnalysisResult(
                new AnalysisResultDto(
                        null,
                        chatId,
                        Instant.now(),
                        message
                )
        );
    }
}
